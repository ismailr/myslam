cmake_minimum_required(VERSION 2.8.3)
project(layout_prediction)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
  tf
  geometry_msgs
  pcl_conversions
  pcl_ros
  cmake_modules
  cv_bridge
  pr2_mechanism_controllers
  message_filters
  isam
  libpointmatcher_ros
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)
find_package(G2O REQUIRED)
find_package(CSparse REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(OpenGL)
find_package(GLUT)
#find_package(libpointmatcher)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES layout_prediction
  CATKIN_DEPENDS roscpp std_msgs tf geometry_msgs pcl_conversions pcl_ros pr2_mechanism_controllers message_filters isam libpointmatcher_ros
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
	include
	${catkin_INCLUDE_DIRS}
	${CSPARSE_INCLUDE_DIR}
    ${EIGEN3_INCLUDE_DIR}
    ${libpointmatcher_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(layout_prediction
#   src/${PROJECT_NAME}/layout_prediction.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(layout_prediction ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

#add_library (isam STATIC IMPORTED)
#set_property(TARGET isam PROPERTY IMPORTED LOCATION /usr/local/lib/libisam.a)

## Declare a C++ executable
add_executable(layout_prediction 
	src/layout_prediction.cpp
	src/helpers.cpp
	src/pose.cpp
    src/wall.cpp
    src/tracker.cpp
    src/wall_detector.cpp
    src/system.cpp
    src/graph.cpp
    src/pose_measurement.cpp
    src/wall_measurement.cpp
    src/types_myslam.cpp
    src/angle_measurement.cpp
    src/settings.cpp
    src/optimizer.cpp
    src/visualizer.cpp
    src/particle.cpp
    src/particle_filter.cpp
    src/icp.cpp
    #    src/fitness_measurement.cpp
    src/g2o/vertex_se2.cpp
    src/g2o/vertex_line2d.cpp
    src/g2o/edge_se2.cpp
    src/g2o/edge_se2_line2d.cpp
    src/g2o/edge_line2d.cpp
    src/slam_interface.cpp
    src/sparse_optimizer_online.cpp
    src/sparse_optimizer_incremental.cpp
    #    src/isamlib/Node.cpp
    #    src/isamlib/util.cpp
    #    src/isamlib/numericalDiff.cpp
    #    src/isamlib/Pose2d.cpp
    #    src/isamlib/Pose3d.cpp
    #    src/isamlib/Optimizer.cpp
    #    src/isamlib/SparseMatrix.cpp
    #    src/isamlib/SparseSystem.cpp
    #    src/isamlib/SparseVector.cpp
    #    src/isamlib/OrderedSparseMatrix.cpp
    #    src/isamlib/Anchor.cpp
    #    src/isamlib/Cholesky.cpp
    #    src/isamlib/ChowLiuTree.cpp
    #    src/isamlib/Covariances.cpp
    #    src/isamlib/GLCReparam.cpp
    #    src/isamlib/covariance.cpp
    #    src/isamlib/glc.cpp
    #    src/isamlib/Slam.cpp
)

add_executable(simulation
	src/simulation.cpp
	src/helpers.cpp
	src/pose.cpp
    src/wall.cpp
    src/tracker.cpp
    src/wall_detector.cpp
    src/system.cpp
    src/graph.cpp
    src/pose_measurement.cpp
    src/wall_measurement.cpp
    src/types_myslam.cpp
    src/angle_measurement.cpp
    src/simulator.cpp
    src/settings.cpp
    src/optimizer.cpp
    src/visualizer.cpp
    src/particle.cpp
    src/particle_filter.cpp
    src/icp.cpp
    src/ekf_mapper.cpp
    #    src/fitness_measurement.cpp
    src/g2o/vertex_se2.cpp
    src/g2o/vertex_line2d.cpp
    src/g2o/edge_se2.cpp
    src/g2o/edge_se2_line2d.cpp
    src/g2o/edge_line2d.cpp
    src/slam_interface.cpp
    src/sparse_optimizer_online.cpp
    src/sparse_optimizer_incremental.cpp
    #    src/isamlib/Node.cpp
    #    src/isamlib/util.cpp
    #    src/isamlib/numericalDiff.cpp
    #    src/isamlib/Pose2d.cpp
    #    src/isamlib/Pose3d.cpp
    #    src/isamlib/Optimizer.cpp
    #    src/isamlib/SparseMatrix.cpp
    #    src/isamlib/SparseSystem.cpp
    #    src/isamlib/SparseVector.cpp
    #    src/isamlib/OrderedSparseMatrix.cpp
    #    src/isamlib/Anchor.cpp
    #    src/isamlib/Cholesky.cpp
    #    src/isamlib/ChowLiuTree.cpp
    #    src/isamlib/Covariances.cpp
    #    src/isamlib/GLCReparam.cpp
    #    src/isamlib/covariance.cpp
    #    src/isamlib/glc.cpp
    #    src/isamlib/Slam.cpp
)

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(layout_prediction_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
target_link_libraries(layout_prediction
	${catkin_LIBRARIES}
	${G2O_CORE_LIBRARY}
	${G2O_STUFF_LIBRARY}
    ${G2O_SOLVER_CHOLMOD}
	${G2O_SOLVER_CSPARSE}
	${G2O_SOLVER_CSPARSE_EXTENSION}
    ${G2O_TYPES_SLAM3D}
    ${G2O_TYPES_SLAM2D}
    ${G2O_OPENGL_HELPER}
    ${OPENGL_gl_LIBRARY}
    ${GLUT_LIBRARIES}
    "/usr/local/lib/libg2o_incremental.so"
    "/usr/local/lib/libg2o_interactive.so"
    "/usr/lib64/libconfig++.so"
    ${LIBPOINTMATCHER_LIBRARIES}
)

target_link_libraries(simulation
	${catkin_LIBRARIES}
	${G2O_CORE_LIBRARY}
	${G2O_STUFF_LIBRARY}
    ${G2O_SOLVER_CHOLMOD}
	${G2O_SOLVER_CSPARSE}
	${G2O_SOLVER_CSPARSE_EXTENSION}
    ${G2O_TYPES_SLAM3D}
    ${G2O_TYPES_SLAM2D}
    ${G2O_OPENGL_HELPER}
    ${OPENGL_gl_LIBRARY}
    ${GLUT_LIBRARIES}
    "/usr/local/lib/libg2o_incremental.so"
    "/usr/local/lib/libg2o_interactive.so"
    "/usr/lib64/libconfig++.so"
    ${LIBPOINTMATCHER_LIBRARIES}
)

add_definitions(-std=c++11)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS layout_prediction layout_prediction_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_layout_prediction.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
